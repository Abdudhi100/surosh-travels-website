/**
 * AUTOGENERATED FILE (Optimized for readability & performance)
 * ------------------------------------------------------------
 * Table schema:
 * CREATE TABLE kv_store_330fd21f (
 *   key TEXT NOT NULL PRIMARY KEY,
 *   value JSONB NOT NULL
 * );
 *
 * View at: https://supabase.com/dashboard/project/xodelvhhdnywkzpehugk/database/tables
 */

import { createClient, SupabaseClient } from "@supabase/supabase-js";

/** Lazy singleton Supabase client */
let _client: SupabaseClient | null = null;

function getClient(): SupabaseClient {
  if (!_client) {
    const SUPABASE_URL = process.env.SUPABASE_URL!;
    const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY!;
    if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
      throw new Error("Missing Supabase environment variables.");
    }
    _client = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);
  }
  return _client;
}

const TABLE = "kv_store_330fd21f";

/** Store a key–value pair */
export async function set(key: string, value: unknown): Promise<void> {
  const { error } = await getClient().from(TABLE).upsert({ key, value });
  if (error) throw new Error(`Supabase set error: ${error.message}`);
}

/** Retrieve a value by key */
export async function get<T = unknown>(key: string): Promise<T | null> {
  const { data, error } = await getClient()
    .from(TABLE)
    .select("value")
    .eq("key", key)
    .maybeSingle();

  if (error) throw new Error(`Supabase get error: ${error.message}`);
  return data?.value ?? null;
}

/** Delete a key–value pair */
export async function del(key: string): Promise<void> {
  const { error } = await getClient().from(TABLE).delete().eq("key", key);
  if (error) throw new Error(`Supabase delete error: ${error.message}`);
}

/** Store multiple key–value pairs */
export async function mset(keys: string[], values: unknown[]): Promise<void> {
  const records = keys.map((key, i) => ({ key, value: values[i] }));
  const { error } = await getClient().from(TABLE).upsert(records);
  if (error) throw new Error(`Supabase mset error: ${error.message}`);
}

/** Retrieve multiple key–value pairs */
export async function mget<T = unknown>(keys: string[]): Promise<T[]> {
  const { data, error } = await getClient()
    .from(TABLE)
    .select("value")
    .in("key", keys);

  if (error) throw new Error(`Supabase mget error: ${error.message}`);
  return data?.map((d) => d.value as T) ?? [];
}

/** Delete multiple key–value pairs */
export async function mdel(keys: string[]): Promise<void> {
  const { error } = await getClient().from(TABLE).delete().in("key", keys);
  if (error) throw new Error(`Supabase mdel error: ${error.message}`);
}

/** Get all values where key starts with a given prefix */
export async function getByPrefix<T = unknown>(prefix: string): Promise<T[]> {
  const { data, error } = await getClient()
    .from(TABLE)
    .select("key, value")
    .like("key", `${prefix}%`);

  if (error) throw new Error(`Supabase getByPrefix error: ${error.message}`);
  return data?.map((d) => d.value as T) ?? [];
}
